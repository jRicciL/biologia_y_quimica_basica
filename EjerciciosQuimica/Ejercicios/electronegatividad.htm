<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8">
 
<title>Electronegatividad</title>

<link href="stylesheet.css" type="text/css" rel="stylesheet" media="screen"/>


<style type="text/css">
html { 
    height:100%;
}
div#container{
	min-height: 100%;
	}

/*Barra de resultados*/
#MainDiv{
	text-align: center;
	background-color: #005670;
	vertical-align: center;
	height: 60px;
	width: 420px;
	margin-left: auto;
	margin-right: auto;
}

/* JMix styles */
div#GuessDiv{
	text-align: center;
	padding: 30px;
	background-color: #C0C0C0;
	margin-top: 10px;
}

div#SegmentDiv{
	margin-top: 2em;
	margin-bottom: 2em;
	text-align: center;
	margin: 20px;
	color: #E41B43;
}

a.ExSegment{
	font-size: 120%;
	font-weight: bold;
	text-decoration: none;
	color: #000000;
}

span.RemainingWordList{
	font-style: italic;
}

div.DropLine {
	position: absolute;
	text-align: center;
	border-bottom-style: solid;
	border-bottom-width: 1px;
	border-bottom-color: #000000;
	width: 80%;
}

/* JCloze styles */

div.CardStyle {
	position: absolute;
	font-family: Geneva,Arial,sans-serif;
	font-size: 100%;
	padding: 5px;
	border-style: solid;
	border-width: 1px;
	color: #000000;
	background-color: #FFFFFF;
	left: -50px;
	top: -50px;
	overflow: visible;
}

.rtl{
	text-align: right;
	font-size: 140%;
}


</style>

<script type="text/javascript">

//<![CDATA[

<!--




function Client(){
//if not a DOM browser, hopeless
	this.min = false; if (document.getElementById){this.min = true;};

	this.ua = navigator.userAgent;
	this.name = navigator.appName;
	this.ver = navigator.appVersion;  

//Get data about the browser
	this.mac = (this.ver.indexOf('Mac') != -1);
	this.win = (this.ver.indexOf('Windows') != -1);

//Look for Gecko
	this.gecko = (this.ua.indexOf('Gecko') > 1);
	if (this.gecko){
		this.geckoVer = parseInt(this.ua.substring(this.ua.indexOf('Gecko')+6, this.ua.length));
//		if (this.geckoVer < 20020000){this.min = false;}
	}
	
//Look for Firebird
	this.firebird = (this.ua.indexOf('Firebird') > 1);
	
//Look for Safari
	this.safari = (this.ua.indexOf('Safari') > 1);
	if (this.safari){
		this.gecko = false;
	}
	
//Look for IE
	this.ie = (this.ua.indexOf('MSIE') > 0);
	if (this.ie){
		this.ieVer = parseFloat(this.ua.substring(this.ua.indexOf('MSIE')+5, this.ua.length));
		if (this.ieVer < 5.5){this.min = false;}
	}
	
//Look for Opera
	this.opera = (this.ua.indexOf('Opera') > 0);
	if (this.opera){
		this.operaVer = parseFloat(this.ua.substring(this.ua.indexOf('Opera')+6, this.ua.length));
		if (this.operaVer < 7.04){this.min = false;}
	}
	if (this.min == false){
//		alert('Your browser may not be able to handle this page.');
	}
	
//Special case for the horrible ie5mac
	this.ie5mac = (this.ie&&this.mac&&(this.ieVer<6));
}

var C = new Client();

//for (prop in C){
//	alert(prop + ': ' + C[prop]);
//}



//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

//[strNavBarJS]
function NavBtnOver(Btn){
	if (Btn.className != 'NavButtonDown'){Btn.className = 'NavButtonUp';}
}

function NavBtnOut(Btn){
	Btn.className = 'NavButton';
}

function NavBtnDown(Btn){
	Btn.className = 'NavButtonDown';
}
//[/strNavBarJS]

function FuncBtnOver(Btn){
	if (Btn.className != 'FuncButtonDown'){Btn.className = 'FuncButtonUp';}
}

function FuncBtnOut(Btn){
	Btn.className = 'FuncButton';
}

function FuncBtnDown(Btn){
	Btn.className = 'FuncButtonDown';
}

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
				//get Mac FireFox to manipulate display, to force screen redraw
				if (C.mac && C.gecko) {Els[i].style.display = '';}
			}
			else{
				Els[i].style.visibility = 'hidden';
				if (C.mac && C.gecko) {Els[i].style.display = 'none';}
			}
		} 
		else {
			// tagName is either input or select (that is, Form Elements)
			// ie6 has a problem with Form elements, so manipulate those
			if (C.ie) {
				if (C.ieVer < 7) {
					if (Show == true){
						Els[i].style.visibility = 'visible';
					}
					else{
						Els[i].style.visibility = 'hidden';
					}
				}
			}
		}
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
	if (Finished == true){
		Finish();
	}
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].clientWidth;
	this.H = document.getElementsByTagName('body')[0].clientHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	if (C.ie) {
		thisKey = window.event.keyCode;
	}
	else {
		thisKey = e.keyCode;
	}

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
	}

	if (Suppress == true){
		if (C.ie){
			window.event.returnValue = false;	
			window.event.cancelBubble = true;
		}
		else{
			e.preventDefault();
		}
	}
}

if (C.ie){
	document.attachEvent('onkeydown',SuppressBackspace);
	window.attachEvent('onkeydown',SuppressBackspace);
}
else{
	if (window.addEventListener){
		window.addEventListener('keypress',SuppressBackspace,false);
	}
}

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}

//EXTENSION TO ARRAY OBJECT
function Array_IndexOf(Input){
	var Result = -1;
	for (var i=0; i<this.length; i++){
		if (this[i] == Input){
			Result = i;
		}
	}
	return Result;
}
Array.prototype.indexOf = Array_IndexOf;

//IE HAS RENDERING BUG WITH BOTTOM NAVBAR
function RemoveBottomNavBarForIE(){
	if ((C.ie)&&(document.getElementById('Reading') != null)){
		if (document.getElementById('BottomNavBar') != null){
			document.getElementById('TheBody').removeChild(document.getElementById('BottomNavBar'));
		}
	}
}




//HOTPOTNET-RELATED CODE

var HPNStartTime = (new Date()).getTime();
var SubmissionTimeout = 30000;
var Detail = ''; //Global that is used to submit tracking data

function Finish(){
//If there's a form, fill it out and submit it
	if (document.store != null){
		Frm = document.store;
		Frm.starttime.value = HPNStartTime;
		Frm.endtime.value = (new Date()).getTime();
		Frm.mark.value = Score;
		Frm.detail.value = Detail;
		Frm.submit();
	}
}




//JMIX STANDARD OUTPUT FORMAT CODE

var CorrectResponse = 'Ta bueno :(';
var IncorrectResponse = 'Lo siento, vuelve a intentarlo.';
var TheseAnswersToo = '';
var ThisMuchCorrect = 'esta parte es correcta';
var NextCorrect = '';
var YourScoreIs = 'Tu puntuaci&#x00F3;n es.';
var CapitalizeFirst = false;
var Penalties = 0;
var Finished = false;
var TimeOver = false;
var Score = 0;
var strInstructions = '';
var AnswersTried = '';


var SegmentTemplate = '&nbsp; &nbsp;<a class="ExSegment" href="javascript:void(0)" onclick="AddSegment([SegmentNumber])" title="">[CurrentSegment]</a>&nbsp; &nbsp;';

var Exercise = '';

var Punctuation = '';

var Openers = '';

var Guesses = new Array();
var Remaining = new Array();
var CorrectParts = new Array();

var ClosestMatch = 0;

var LowerString='';
var UpperString='';

var Output = '';

var Segments = new Array();
Segments[0] = new Array();
Segments[0][0] = '\u004E\u0069\u0074\u0072\u00F3\u0067\u0065\u006E\u006F';
Segments[0][1] = 3;
Segments[0][2] = 0;
Segments[1] = new Array();
Segments[1][0] = '\u0048\u0069\u0064\u0072\u00F3\u0067\u0065\u006E\u006F';
Segments[1][1] = 6;
Segments[1][2] = 0;
Segments[2] = new Array();
Segments[2][0] = '\u0043\u0061\u0072\u0062\u006F\u006E\u006F';
Segments[2][1] = 5;
Segments[2][2] = 0;
Segments[3] = new Array();
Segments[3][0] = '\u0050\u006F\u0074\u0061\u0073\u0069\u006F';
Segments[3][1] = 9;
Segments[3][2] = 0;
Segments[4] = new Array();
Segments[4][0] = '\u004F\u0078\u00ED\u0067\u0065\u006E\u006F';
Segments[4][1] = 2;
Segments[4][2] = 0;
Segments[5] = new Array();
Segments[5][0] = '\u0046\u0072\u0061\u006E\u0063\u0069\u006F';
Segments[5][1] = 11;
Segments[5][2] = 0;
Segments[6] = new Array();
Segments[6][0] = '\u0048\u0069\u0065\u0072\u0072\u006F';
Segments[6][1] = 7;
Segments[6][2] = 0;
Segments[7] = new Array();
Segments[7][0] = '\u0043\u0065\u0073\u0069\u006F';
Segments[7][1] = 10;
Segments[7][2] = 0;
Segments[8] = new Array();
Segments[8][0] = '\u0043\u006C\u006F\u0072\u006F';
Segments[8][1] = 4;
Segments[8][2] = 0;
Segments[9] = new Array();
Segments[9][0] = '\u004C\u0069\u0074\u0069\u006F';
Segments[9][1] = 8;
Segments[9][2] = 0;
Segments[10] = new Array();
Segments[10][0] = 'Flúor';
Segments[10][1] = 1;
Segments[10][2] = 0;


var GuessSequence = new Array();

var Answers = new Array();
Answers[0] = new Array(1,2,3,4,5,6,7,8,9,10,11);


function WriteToGuess(Feedback) {
	document.getElementById('GuessDiv').innerHTML = Feedback;

}

function Undo(){
	if (GuessSequence.length < 1){
		return;
	}
	GuessSequence.length = GuessSequence.length - 1;
	BuildCurrGuess();
	BuildExercise();
	DisplayExercise(Exercise);
//Following line modified for 6.0.4.44 -- "remaining words" message removed, no longer needed
	WriteToGuess('<span class="Answer">' + Output + '</span>');
}

function AddSegment(SegNum){

	GuessSequence[GuessSequence.length] = SegNum;
	BuildCurrGuess();
	WriteToGuess('<span class="Answer">' + Output + '</span>');
	BuildExercise();
	DisplayExercise(Exercise);
}

function BuildCurrGuess(){

	var i = 0;
	var j = 0;
	var NewSeg = '';

//first, create arrays of all the segments guessed so far and those not yet used
	GuessSegs = new Array();
	GuessSegs.length = 0;

//set the "used" markers all to 0
	for (i=0; i<Segments.length; i++){
		Segments[i][2] = 0;
	}

	for (i=0; i<GuessSequence.length; i++){
		for (j=0; j<Segments.length; j++){
			if ((Segments[j][1] == GuessSequence[i])&&(Segments[j][2] == 0)){
				GuessSegs[GuessSegs.length] = Segments[j][0];
				Segments[j][2] = 1;
				break;
			}
		}
	}

//Create the list of unused segments
	RemainingList = '';
	for (i=0; i<Segments.length; i++){
		if (Segments[i][2] == 0){
			RemainingList += Segments[i][0] + '&nbsp; &nbsp;&nbsp;';
		}
	}
	
//now concatenate the segments, adding spaces where appropriate;
	Output = CompileString(GuessSequence);
}

function CompileString(InArray){
	var OutString = '';
	var i = 0;
	OutArray = new Array();

	for (i=0; i<InArray.length; i++){
		OutArray[OutArray.length] = FindSegment(InArray[i]);
	}

	if (OutArray.length > 0){
		OutString = OutArray[0];
	}
	else{
		OutString = '';
	}
	var Spacer = '';

	for (i=1; i<OutArray.length; i++){
		Spacer = ' ';
		if ((Openers.indexOf(OutString.charAt(OutString.length-1)) > -1)||(Punctuation.indexOf(OutArray[i].charAt(0)) > -1)){
			Spacer = '';
		}
		OutString = OutString + Spacer + OutArray[i];		
	}

//Capitalize the first letter if necessary
	if (CapitalizeFirst == true){
		i = 0;
		if ((Openers.indexOf(OutString.charAt(i))>-1)||(OutString.charAt(i) == ' ')){
			i++;
		}
		if ((Openers.indexOf(OutString.charAt(i))>-1)||(OutString.charAt(i) == ' ')){
			i++;
		}
		var Temp = OutString.charAt(i);
		Temp = Temp.toUpperCase();
		OutString = OutString.substring(0, i) + Temp + OutString.substring(i+1, OutString.length);
	}
	return OutString;
}
function CheckAnswer(CheckType){

	if (GuessSequence.length < 1){
		if (CheckType == 1){
			ShowMessage(NextCorrect + '<br /><span class="Answer">' + FindSegment(Answers[0][0]) + '</span>');
			Penalties++;
		}
		return;
	}

	var i = 0;
	var j = 0;
	var k = 0;
	var WellDone = '';
	var WhichCorrect = -1;
	var TryAgain = '';
	var LongestCorrectBit = '';
	TempCorrect = new Array();
	LongestCorrect = new Array();
	var TempHint = '';
	var HintToReturn = 1;
	var OtherAnswers = '';
	var AllDone = false;

	for (i=0; i<Answers.length; i++){
		TempCorrect.length = 0;
		for (j=0; j<Answers[i].length; j++){
			if (Answers[i][j] == GuessSequence[j]){
				TempCorrect[j] = GuessSequence[j];
			}
			else{
				TempHint = Answers[i][j];
				break;
			}
		}
		if ((TempCorrect.length == GuessSequence.length)&&(TempCorrect.length == Answers[i].length)){

			WhichCorrect = i;
			break;
		}
		else{
			if (TempCorrect.length > LongestCorrect.length){
				LongestCorrect.length = 0;
				for (k=0; k<TempCorrect.length; k++){
					LongestCorrect[k] = TempCorrect[k];
				}
				HintToReturn = TempHint;
			} 
		}	
	}
	if (WhichCorrect > -1){
		AllDone = true;
		for (i=0; i<Answers.length; i++){
			if (i!=WhichCorrect){
				OtherAnswers += '<br />' + CompileString(Answers[i]);
			}
		}

		WellDone = '<span class="Answer">' + Output + '</span><br /><br />' + CorrectResponse + '<br />';

		if (AnswersTried.length > 0){AnswersTried += ' | ';}
		AnswersTried += Output;
		
//Do score calculation here
		Score = Math.floor(((Segments.length-Penalties) * 100)/Segments.length);


		if (OtherAnswers.length > 0){
			WellDone += TheseAnswersToo + '<span class="Answer">' + OtherAnswers + '</span>';
		}


		WriteToGuess(WellDone);
		ShowMessage(WellDone + '<br />' + YourScoreIs + ' ' + Score + '%.');
	}

	else{
		var WrongGuess = CompileString(GuessSequence);
		if (AnswersTried.length > 0){AnswersTried += ' | ';}
		AnswersTried += WrongGuess;
		TryAgain = '<span class="Answer">' + "Has ingresado:<br/>" + WrongGuess + '</span><br /><br />';
		if (CheckType == 0){
			TryAgain += IncorrectResponse + '<br />';
		}

		if (LongestCorrect.length > 0){

			LongestCorrectBit = CompileString(LongestCorrect);
			GuessSequence.length = LongestCorrect.length;
			TryAgain += ThisMuchCorrect + '<br /><span class="Answer">' + LongestCorrectBit + '</span><br />';

//These lines added for 6.0.3.44
			WriteToGuess('<span class="Answer">' + LongestCorrectBit + '</span>');
		}
		else{
			GuessSequence.length = 0;
			WriteToGuess('');
		}

		if (CheckType == 1){
			TryAgain += NextCorrect + '<br /><span class="Answer">' + FindSegment(HintToReturn) + '</span>';
		}

		BuildCurrGuess();
		BuildExercise();
		DisplayExercise(Exercise);
		ShowMessage(TryAgain);
		Penalties++; //Penalty for inaccurate check
		


	}
//If the exercise is over, deal with that
	if ((AllDone == true)||(TimeOver == true)){


		TimeOver = true;
		Locked = true;
		Finished = true;
		setTimeout('Finish()', SubmissionTimeout);
		WriteToInstructions(YourScoreIs + ' ' + Score + '%.'); 
	}

}

function FindSegment(SegID){
	var Seg = '';
	for (var i=0; i<Segments.length; i++){
		if (Segments[i][1] == SegID){
			Seg = Segments[i][0];
			break;
		}
	}
	return Seg;
}

function StartUp(){
	RemoveBottomNavBarForIE();

//Stash the instructions so they can be redisplayed
	strInstructions = document.getElementById('InstructionsDiv').innerHTML;
	






	Segments = Shuffle(Segments);

//Build and show the exercise
	BuildExercise();
	DisplayExercise(Exercise);	
	

}


function BuildExercise(){
	Exercise = '';

	var SegRow = '';
	var TempRow = '';

	for (var i=0; i<Segments.length; i++){
//if the segment hasn't been used yet
		if (Segments[i][2] == 0){
			TempRow = SegmentTemplate;
			TempRow = TempRow.replace(/\[SegmentNumber\]/g, Segments[i][1]);
			TempRow = TempRow.replace(/\[CurrentSegment\]/g, Segments[i][0]);
			SegRow += TempRow;
		}
	}

//Make it into a table
	Exercise = SegRow;
}

function DisplayExercise(StuffToDisplay){
	document.getElementById('SegmentDiv').innerHTML = StuffToDisplay;
	FocusAButton();

}








//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" >

<!--Menú de navegación-->
<div id="botonatras">
	<button class='left'><a href="disoluciones.htm"><img  src="images/arrow1.png"  width='40'alt="izquierdo"></a></button>
</div>
<div id="botonadelante">
	<button class='right'><a href="cuestionariogral.htm"><img  src="images/arrow1.png"  width='40'alt="izquierdo"></a></button>
</div>
<div id="menuPorta">
	<div id="logoMenu"></div>

	<div href="../Inicio.html" id='seccionPorta1' class="seccionPorta">
		<div id='iconoMenu1' class="iconosPorta"></div>
		<a href="../Inicio.htm">
			<p class='textoMenu'>Inicio</p></a>
	</div>
	</div>
<!--Menú de navegación-->

	<div id="container" class="shadow">
	    <img id="port" src="images/logo-portfolio.png" width="969" alt="Portafolio
    línea de Ricci"/>
<!-- BeginTopNavButtons -->

<!-- EndTopNavButtons -->

<div class="Titles">
	<header class="ExerciseTitle">Electronegatividad</header>




</div>

<div id="InstructionsDiv" class="StdDiv">
<div id="InstruccionesGrales">
	<div id="Instructions">Ordena los siguientes elementos de Mayor a Menor según su electronegatividad.</div>
</div>
</div>



<div id="GuessDiv" class="StdDiv">
	RESPUESTA
</div>

<div id="SegmentDiv">

</div>

<div id="MainDiv" class="StdDiv">

<button id="CheckButton1" class="FuncButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="CheckAnswer(0)">&nbsp;Revisar&nbsp;</button>


<button class="FuncButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="Undo()">&nbsp;Deshacer&nbsp;</button>



<button class="FuncButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="location.reload()">&nbsp;Reiniciar&nbsp;</button>



<button class="FuncButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="CheckAnswer(1)">&nbsp;Pista&nbsp;</button>




</div>



<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onfocus="FuncBtnOver(this)" onblur="FuncBtnOut(this)" onmouseover="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="HideFeedback(); return false;">&nbsp;OK&nbsp;</button>
</div>

<!-- BeginBottomNavButtons -->

</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
